#!/bin/bash

setup_packages() {
  # gets name of distro
  DISTRO="$(cat /etc/os-release | grep ^DISTRIB_ID | sed s/DISTRIB_ID=//g | sed s/\"//g)"
  # gets install command from distro and distro specific package names
  case "$DISTRO" in
    "void") 
      sudo xbps-install -Syu
      INSTALL_CMD="sudo xbps-install -y" # packages to install
      PACKAGES=(
        "firefox"
        "font-awesome"
        "nerd-fonts"
        "neovim"
        "tmux"
        "zsh"
        "redshift"
        "curl"
        "base-devel"
        "xorg-minimal"
        "xrdb"
        "feh"
        "libX11-devel"
        "libXft-devel"
        "libXinerama-devel"
        "freetype-devel"
        "fontconfig-devel"
        "harfbuzz-devel"
        "fzf"
        "bat"
        "stow"
        "meson"
        "cmake"
        "libev-devel"
        "xcb-util-renderutil-devel"
        "xcb-util-image-devel"
        "uthash"
        "libconfig-devel"
        "elogind"
        "dbus"
        # "pam-libs"
        # "dbus-elogind"
        # "elogind-devel"
        "pipewire"
        "pulsemixer"
      )
    ;;
    "arch") 
      INSTALL_CMD="sudo pacman -S"
    ;;
  esac
  for PACKAGE in ${PACKAGES[@]}; do
    eval "$INSTALL_CMD $PACKAGE" 
  done
}

setup_directories() {
  # makes the XDG dirs
  if [ -L "$HOME/.config" ]; then
    mkdir $HOME/.config
  fi
  if [ -L "$HOME/.local" ]; then
    mkdir $HOME/.local
  fi
  if [ -L "$HOME/.cache" ]; then
    mkdir $HOME/.cache
  fi
  # make other home dirs
  if [ -L "$HOME/Pictures" ]; then
    mkdir $HOME/Pictures
  fi
  if [ -L "$HOME/Downloads" ]; then
    mkdir $HOME/Downloads
  fi
  # making nvim path so that nvim does create new folders in dotfiles
  mkdir $HOME/.local/share/nvim/site/pack/packer/start
    # creating symlinks
  sudo stow . 
}

setup_programs() {
  # enabling scripts
  chmod +x $HOME/.local/bin/*
  # ZSH
  chsh -s /usr/bin/zsh
  source $HOME/.zshrc 
  # removing bash
  rm $HOME/.bash_history
  rm $HOME/.bash_logout
  rm $HOME/.bash_profile
  rm $HOME/.bashrc
  # neovim
  nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  # picom
  meson --buildtype=release $HOME/.local/share/picom
  ninja -C $HOME/.local/share/picom/build
  sudo mv $HOME/.local/share/picom/build/src/picom /usr/bin
  # pipewire
  sudo ln -s /etc/sv/dbus /var/service
  # compiling suckless programs
  cd $HOME/.local/share/dwm
  sudo make clean install
  cd $HOME/.local/share/dwmblocks
  sudo make clean install
  cd $HOME/.local/share/dmenu
  sudo make clean install
  cd  $HOME/.local/share/st
  sudo make clean install
  # loading xresources
  xrdb $HOME/.Xresources
  exit
}

setup() {
  setup_packages
  setup_directories
  setup_programs
}

setup
