#!/bin/sh

setup_packages() {
  # gets name of distro
  DISTRO="$(cat /etc/os-release | grep ^DISTRIB_ID | sed s/DISTRIB_ID=//g | sed s/\"//g)"
  # gets install command from distro and distro specific package names
  case "$DISTRO" in
    "void") 
      # sudo xbps-install -Syu
      INSTALL_CMD="sudo xbps-install -y"
      # packages to install
      set --                        \
        "firefox"                   \
        "font-awesome"              \
        "nerd-fonts"                \
        "neovim"                    \
        "tmux"                      \
        "zsh"                       \
        "redshift"                  \
        "curl"                      \
        "base-devel"                \
        "xorg"                      \
        "feh"                       \
        "libX11-devel"              \
        "libXft-devel"              \
        "libXinerama-devel"         \
        "freetype-devel"            \
        "fontconfig-devel"          \
        "harfbuzz-devel"            \
        "libXrandr-devel"           \
        "fzf"                       \
        "bat"                       \
        "stow"                      \
        "meson"                     \
        "cmake"                     \
        "libev-devel"               \
        "xcb-util-renderutil-devel" \
        "xcb-util-image-devel"      \
        "uthash"                    \
        "libconfig-devel"           \
        "elogind"                   \
        "dbus"                      \
        "dbus-elogind"              \
        "pandoc"                    \
        "zathura"                   \
        "zathura-pdf-poppler"       \
        "texlive"                   \
        "pipewire"                  \
        "emacs-x11"                     \
        "pulsemixer"                
    ;;
    "arch") 
      INSTALL_CMD="sudo pacman -S"
    ;;
  esac
  for PACKAGE in "$@" ; do
    eval "$INSTALL_CMD $PACKAGE" 
  done
}

setup_directories() {
  # makes the XDG dirs
  if [ ! -d "$HOME/.config" ]; then
    mkdir $HOME/.config
  fi
  if [ ! -d "$HOME/.local" ]; then
    mkdir $HOME/.local
  fi
  if [ ! -d "$HOME/.cache" ]; then
    mkdir $HOME/.cache
  fi
  # make other home dirs
  if [ ! -d "$HOME/Pictures" ]; then
    mkdir $HOME/Pictures
  fi
  if [ ! -d "$HOME/Downloads" ]; then
    mkdir $HOME/Downloads
  fi
  if [ ! -d "$HOME/.local/share/nvim/site/pack/packer/start" ]; then
    mkdir -p $HOME/.local/share/nvim/site/pack/packer/start
  fi
  # creating symlinks
  sudo stow . 
}

setup_programs() {
  # add dbus to runit
  if [ ! -L "/var/service/dbus" ]; then
    sudo ln -s /etc/sv/dbus /var/service
  fi
  # enabling scripts
  chmod +x $HOME/.local/bin/*
  # ZSH
  if [ ! $SHELL = "/bin/zsh" ]; then
    chsh -s /usr/bin/zsh
    source $HOME/.zshrc 
  fi
  # removing bash
  if [ -f "$HOME/.bash_history" ]; then
    rm $HOME/.bash_history
  fi
  if [ -f "$HOME/.bash_logout" ]; then
    rm $HOME/.bash_logout
  fi
  if [ -f "$HOME/.bash_profile" ]; then
    rm $HOME/.bash_profile
  fi
  if [ -f "$HOME/.bashrc" ]; then
    rm $HOME/.bashrc
  fi
  # neovim
  nvim --headless -c 'autocmd User PackerComplete quitall' -c 'PackerSync'
  # picom
  cd $HOME/.local/share/picom
  meson --buildtype=release . build
  ninja -C build
  sudo mv $HOME/.local/share/picom/build/src/picom /usr/bin
  cd $HOME/.dotfiles
  # compiling suckless programs
  cd $HOME/.local/share/dwm
  sudo make clean install
  cd $HOME/.local/share/dwmblocks
  sudo make clean install
  cd $HOME/.local/share/dmenu
  sudo make clean install
  cd  $HOME/.local/share/st
  sudo make clean install
  cd  $HOME/.local/share/slock
  sudo make clean install
  # loading xresources
  xrdb $HOME/.Xresources
}

setup() {
  setup_packages
  setup_directories
  setup_programs
  if [ $(pgrep dwm) = "" ]; then 
    pkill -KILL -u $(whoami)
  fi
}

setup
