#+TITLE: Emacs Config in Org Mode
#+AUTHOR: Aidan Hopper
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :results none
#+STARTUP: overview
* Ui config and basic setup
#+begin_src emacs-lisp

   (setq vc-follow-symlinks t)
   (setq inhibit-startup-message t
         display-line-numbers-type 'relative package-enable-at-startup nil backup-by-copying t      ; don't clobber symlinks
         backup-directory-alias
         '(("." . "~/.cache/backups"))    ; don't litter my vs tree
         delete-old-versions t
         kept-new-versions 6
         kept-old-versions 2
         version-control t) 

   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (global-display-line-numbers-mode 1)

   (defvar main/fixed-font-size 140)
   (defvar main/variable-font-size 200)

   (set-face-attribute 'default nil :font "JetBrainsMono Nerd Font" :height main/fixed-font-size)
   (set-face-attribute 'fixed-pitch nil :font "JetBrainsMono Nerd Font" :height main/fixed-font-size)
   (set-face-attribute 'variable-pitch nil :font "ETBembo" :height main/variable-font-size):

  (setq default-frame-alist '((font . "JetBrainsMono Nerd Font")))

   (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1)))
   (add-hook 'help-mode-hook (lambda () (display-line-numbers-mode -1)))
   (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode -1)))

   (set-frame-parameter (selected-frame) 'alpha '(85 . 85))
   (add-to-list 'default-frame-alist '(alpha . (85 . 85)))
#+end_src

* Packages
** Straight
Better package manager.
#+begin_src emacs-lisp
 ;; Initialize package sources
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
 

#+end_src

** Setup
#+begin_src emacs-lisp
  (use-package setup)
#+end_src

** Magit
#+begin_src emacs-lisp

  (setup (use-package magit))

#+end_src

** Evil
Vim keybindings.
#+begin_src emacs-lisp

  (use-package evil
    :init 
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    ;(setq evil-respect-visual-line-mode t)
    :config
    (evil-mode 1))
  
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-numbers
    :after evil)


#+end_src

** Vertico
Completion framework and fuzzy searching.
#+begin_src emacs-lisp

  (use-package vertico
    :init (vertico-mode))

  (use-package orderless
    :init
    (setq completion-styles '(orderless basic)
      completion-category-defaults nil
      completion-category-overrides '((file (styles partial-completion)))))

  (use-package consult)

#+end_src

** Themes
Doom themes.
#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-themes
    :init (load-theme 'doom-nord t))

  (use-package doom-modeline
    :init 
    (doom-modeline-mode 1)
    :custom 
    (doom-modeline-icon t))

#+end_src

** Which-key
Helps when forgetting keybinds.
#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 1))

#+end_src

** General
Adds a leader key to emacs.
#+begin_src emacs-lisp

  (use-package general
    :config
    (general-create-definer main/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

** Terminal
Vterm setup with useful functions.
#+begin_src emacs-lisp

    (use-package vterm
      :commands vterm
      :config
      (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *") 
      
  (defun vterm-split-window-below ()
     (interactive)
     (vterm)
     (split-window-below -12)
     (previous-buffer)
     (other-window 1))

   (defun vterm-toggle ()
     "Toggle vterm open and hide with Control + `"
     (interactive)
     (if (eq major-mode 'vterm-mode)
         (delete-window)
       (vterm-split-window-below)))
      (setq vterm-max-scrollback 10000))

#+end_src

** Fzf
#+begin_src emacs-lisp
  (setenv "FZF_DEFAULT_COMMAND" "find -type l")
    (defun fcd ()
      (interactive)
      (fzf-find-file "~"))

      (setup (use-package fzf)
        (main/leader-keys
          "fz" '(fzf :which-key "fzf files in current dir")
          "ff" '(fcd :which-key "fzf files in home dir")
          "fg" '(fzf :which-key "fzf files in current dir")))

#+end_src

** Development packages
*** Auto pairs
#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook 'electric-pair-local-mode)
  
#+end_src

*** Treesitter
Adds treesitter highlighting.
#+begin_src emacs-lisp

  (use-package tree-sitter)
  (use-package tree-sitter-langs)
  (setq global-tree-sitter-mode t)

#+end_src

*** Yasnippet
#+begin_src emacs-lisp

  (use-package yasnippet)
  (setq yas-snippet-dirs '("~/.config/emacs/snippets"))
  (setq yas-triggers-in-field t)
  (yas-global-mode 1)
  (use-package yasnippet-snippets)

#+end_src

*** LSP-Ui
#+begin_src emacs-lisp

    (use-package lsp-ui)
    (setq lsp-ui-sideline-show-diagnostics t
          lsp-ui-sideline-show-hover t
          lsp-ui-sideline-show-code-actions t)


#+end_src

*** LSP-Mode
#+begin_src emacs-lisp

  (use-package lsp-mode
    :init
    ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
    (setq lsp-keymap-prefix "C-c l")
    :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
           (XXX-mode . lsp)
           ;; if you want which-key integration
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

#+end_src

*** Company-mode
#+begin_src emacs-lisp

  (use-package company)
  (add-hook 'prog-mode #'company-mode)
  (add-hook 'prog-mode #'icomplete-mode)

#+end_src

*** Languages
#+begin_src emacs-lisp

  (add-hook 'prog-mode-hook #'lsp)
  (add-hook 'c-mode-hook #'tree-sitter-hl-mode t)

#+end_src

* Org mode
** Org
Basic org mode setup.
#+begin_src emacs-lisp

    (setq ispell-program-name "aspell")

      (defun main/org-font-setup ()
        ;; Set faces for heading levels
        (dolist (face '((org-level-1 . 1.5)
                        (org-level-2 . 1.2)
                        (org-level-3 . 1.1)
                        (org-level-4 . 1.0)
                        (org-level-5 . 1.0)
                        (org-level-6 . 1.0)
                        (org-level-7 . 1.0)
                        (org-level-8 . 1.0)
                        (org-document-title . 2.0)))
          (set-face-attribute (car face) nil :font "ETBembo" :weight 'regular :height (cdr face)))
       (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
       (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
       (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
       (set-face-attribute 'org-table nil    :inherit 'fixed-pitch))

        (defun main/org-mode-setup ()
          (org-indent-mode)
          (variable-pitch-mode 1)
          (visual-line-mode 1)
          (org-display-inline-images)
          (display-line-numbers-mode -1)
          (main/org-font-setup))

        (setq image-use-external-converter t)
        (setq org-image-actual-width (/ (display-pixel-width) 4))
        (use-package org
          :hook (org-mode . main/org-mode-setup))

        (defun main/org-mode-visual-fill ()
          (setq visual-fill-column-width 100
                visual-fill-column-center-text t)
          (visual-fill-column-mode 1))

        (use-package visual-fill-column
          :hook (org-mode . main/org-mode-visual-fill))

        (use-package org-bullets
          :after org
          :hook (org-mode . org-bullets-mode))

        (setq header-line-format " ")

        (setq org-startup-indented t
            org-bullets-bullet-list '(" ") ;; no bullets, needs org-bullets package
            org-ellipsis " ï„‡ " ;; folding symbol
            org-pretty-entities t
            org-hide-emphasis-markers t
            ;; show actually italicized text instead of /italicized text/
            org-agenda-block-separator ""
            org-fontify-whole-heading-line t
            org-fontify-done-headline t
            org-fontify-quote-and-verse-blocks t)

    (add-hook 'org-mode-hook
              #'(lambda () (yas-activate-extra-mode 'latex-mode)))

  (add-hook 'org-mode-hook 'flyspell-mode)


#+end_src

** Org babel
Loads org babel languages.
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (latex . t)))

#+end_src

** LaTeX
#+begin_src emacs-lisp

    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))

  ;(eval-after-load 'org
      ;(add-to-list 'org-latex-packages-alist '("" "tikz" t)))
#+end_src

** Org roam
#+begin_src emacs-lisp

  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory (file-truename "~/Documents/notes/"))
    :bind (("C-c n l" . org-roam-buffer-toggle)
              ("C-c n f" . org-roam-node-find)
              ("C-c n g" . org-roam-graph)
              ("C-c n i" . org-roam-node-insert)
              ("C-c n c" . org-roam-capture)
              ;; Dailies
              ("C-c n j" . org-roam-dailies-capture-today))
    :config
    ;; If you're using a vertical completion framework, you might want a more informative completion interface
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode)
    ;; If using org-roam-protocol
    (require 'org-roam-protocol))

#+end_src

** Org present
#+begin_src emacs-lisp

    (defun main/org-present-hook ()
      (setq-local face-remapping-alist '(
        (default (:height 1.5) variable-pitch)
        (header-line (:height 4.5) variable-pitch)
        (org-document-title (:height 1.75) org-document-title)
        (org-document-info (:height 1.5) org-document-info)
        ;(org-code (:height 1.55) org-code)
        ;(org-verbatim (:height 1.55) org-verbatim)
        ;(org-block (:height 1.25) org-block)
      ))
      (setq header-line-format " "))

    (defun main/org-present-quit-hook ()
      (setq header-line-format nil)
      ;(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))
      (org-overview)
      (setq-local face-remapping-alist '((default variable-pitch default))))

  (defun main/org-present-prepare-slide ()
    (org-overview)
    (org-show-entry)
    (org-show-children))

  (defun main/org-present-next ()
    (interactive)
    (org-present-next)
    (main/org-present-prepare-slide))

  (defun main/org-present-prev ()
    (interactive)
    (org-present-prev)
    (main/org-present-prepare-slide))

    (use-package org-present)
    (add-hook 'org-present-mode-hook 'main/org-present-hook)
    (add-hook 'org-present-mode-quit-hook 'main/org-present-quit-hook)

  (evil-define-key '(normal visual) 'global (kbd "C-c C-j") 'main/org-present-next)
  (evil-define-key '(normal visual) 'global (kbd "C-c C-k") 'main/org-present-prev)



#+end_src

** Config file settings
Sets up tangle for this config file.
#+begin_src emacs-lisp

  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
      (expand-file-name "~/.config/emacs/emacs.org"))
    (let ((org-config-babel-evaluate nil))
      (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook 'org-babel-tangle-config)))

#+end_src

** Structure templates
Structure templates for languages to streamline writing org babel code.
#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("clang" . "src C"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src C++"))
    (add-to-list 'org-structure-template-alist '("la" . "src latex"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

#+end_src

* Keys
Keybindings section.
#+begin_src emacs-lisp

    (main/leader-keys
      "w" '(save-buffer :which-key "save")
      ;"ff" '(find-file :which-key "file search")
      "fd" '(consult-buffer :which-key "buffer switcher")
      
      "j" '(evil-next-visual-line :which-key "next visual line")				    
      "k" '(evil-previous-visual-line :which-key "prev visual line"))				    

    (evil-define-key '(normal visual) 'global (kbd "C-a a") 'evil-numbers/inc-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "C-a x") 'evil-numbers/dec-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "g C-a") 'evil-numbers/inc-at-pt-incremental)
    (evil-define-key '(normal visual) 'global (kbd "g C-x") 'evil-numbers/dec-at-pt-incremental)

    (evil-define-key '(normal visual) 'global (kbd "C-w t s") 'vterm-toggle)

#+end_src



