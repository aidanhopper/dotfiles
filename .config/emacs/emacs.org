#+title: Emacs Config
#+author: Aidan Hopper
#+property: header-args:emacs-lisp :tangle ~/.config/emacs/init.el :results none
#+startup: overview

* Package.el and setup macro
#+begin_src emacs-lisp

  ;; Initialize package sources (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (require 'setup)
  (setq use-package-always-ensure t)

#+end_src

* Tangle config
#+begin_src emacs-lisp

  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/.config/emacs/emacs.org"))
      (let ((org-config-babel-evaluate nil))
        (org-babel-tangle))))

  (setup tangle-config
    (:with-mode org-mode
      (:hook (lambda ()
               (add-hook 'after-save-hook
                         'org-babel-tangle-config)))))

#+end_src

* Profile.el
** Defaults
#+begin_src emacs-lisp

  ; themes
  (defvar profile/light-theme 'doom-flatwhite)
  (defvar profile/dark-theme 'doom-nord)

  ; font size
  (defvar profile/fixed-font-size 140)
  (defvar profile/variable-font-size 200)

  ; fonts
  (defvar profile/fixed-font "JetBrainsMono Nerd Font")
  (defvar profile/variable-font "ETBembo")

  ;latex
  (defvar profile/latex-scale 3.0)

  ;opacity
  (defmacro profile/opacity 100)

#+end_src

** Load profile
#+begin_src emacs-lisp


  (if (file-exists-p "~/.config/emacs/lisp/profile.el")
    (progn
      (add-to-list 'load-path "~/.config/emacs/lisp")
      (load "profile.el")))

#+end_src

* Basic setup
** Fonts
#+begin_src emacs-lisp

  (defun main/set-fonts ()
    (set-face-attribute 'default nil :font profile/fixed-font :height profile/fixed-font-size)
    (set-face-attribute 'fixed-pitch nil :font profile/fixed-font :height profile/fixed-font-size)
    (set-face-attribute 'variable-pitch nil :font profile/variable-font :height profile/variable-font-size)
    (setq default-frame-alist '((font . profile/fixed-font))))

#+end_src

** Disable line numbers in certain modes
#+begin_src emacs-lisp

  (defun main/disable-line-numbers-mode ()
    (add-hook 'term-mode-hook (lambda () (display-line-numbers-mode -1)))
    (add-hook 'neotree-mode-hook (lambda () (display-line-numbers-mode -1)))
    (add-hook 'help-mode-hook (lambda () (display-line-numbers-mode -1)))
    (add-hook 'vterm-mode-hook (lambda () (display-line-numbers-mode -1))))

#+end_src

** Startup function
#+begin_src emacs-lisp

  (defun main/startup ()
   (set-frame-parameter (selected-frame) 'alpha 85)
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
   (server-mode)
   (global-display-line-numbers-mode 1)
   (main/disable-line-numbers-mode)
   (main/set-fonts))

#+end_src 

** Call UI setup
#+begin_src emacs-lisp

  (setup startup
    (:option vc-follow-symlinks t
             inhibit-startup-message t
             display-line-numbers-type 'relative package-enable-at-startup nil backup-by-copying t      ; don't clobber symlinks
             backup-directory-alias '(("." . "~/.cache/backups"))    ; don't litter my vs tree
             backup-directory-alist '(("." . "~/.cache/backups"))
             frame-resize-pixelwise t
             delete-old-versions t
             scroll-conservatively 10
             scroll-margin 7
             kept-new-versions 6
             kept-old-versions 2
             version-control t)
    (main/startup))

#+end_src

* Packages
** Keys
*** General
#+begin_src emacs-lisp

  (setup (:package general)
    (general-evil-setup t)
    (general-create-definer main/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (main/leader-keys
      "w" '(save-buffer :which-key "save")))

#+end_src

*** Evil
#+begin_src emacs-lisp

  (setup (:package evil evil-collection evil-numbers)
    (:option evil-want-integration t
             evil-want-keybinding nil)
    (evil-mode 1)
    (evil-collection-init)
    (evil-define-key '(normal visual) 'global (kbd "C-a C-a") 'evil-numbers/inc-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "C-a C-x") 'evil-numbers/dec-at-pt)
    (evil-define-key '(normal visual) 'global (kbd "g C-a") 'evil-numbers/inc-at-pt-incremental)
    (evil-define-key '(normal visual) 'global (kbd "g C-x") 'evil-numbers/dec-at-pt-incremental)
    (evil-define-key '(normal visual) 'global (kbd "C-u") 'evil-scroll-up)
    (main/leader-keys
      "j" '(evil-next-visual-line :which-key "next visual line")
      "k" '(evil-previous-visual-line :which-key "prev visual line")))

#+end_src

*** Which-key
#+begin_src emacs-lisp

  (setup (:package which-key)
    (:option which-key-idle-delay 0.3)
    (which-key-mode))

#+end_src

** Mini-buffer
#+begin_src emacs-lisp

  (setup (:package vertico orderless consult marginalia)
    (:option completion-styles '(orderless basic)
             completion-category-defaults nil
             completion-category-overrides
             '((file (styles partial-completion)))
             marginalia-annotators '(marginalia-annotators-heavy
                                     marginalia-annotators-light nil))
    (marginalia-mode 1)
    (vertico-mode 1)
    (main/leader-keys
      "fd" '(consult-buffer :which-key "buffer switcher")))

#+end_src

** Themes
#+begin_src emacs-lisp

  (defvar main/hour (string-to-number (format-time-string "%H")))

  (defun main/theme-setup ()
    (if (and (> main/hour 6) (< main/hour 20))
        (load-theme profile/light-theme t)
      (load-theme profile/dark-theme t)))

  (setup (:package all-the-icons doom-themes doom-modeline)
    (main/theme-setup)
    (doom-modeline-mode 1))

#+end_src

** Doc view
#+begin_src emacs-lisp

  (setup doc-view-mode
    (:option doc-view-resolution 300)
    (:hook (lambda () (doc-view-fit-height-to-window))))

#+end_src

** Magit
#+begin_src emacs-lisp

  (setup (:package magit))

#+end_src

** Project management
#+begin_src emacs-lisp

  (setup (:package projectile))

#+end_src

** Terminal
*** Split functions
#+begin_src emacs-lisp

  (defun vterm-vertical-split () 
    (interactive)
    (split-window-horizontally)
    (other-window 1)
    (vterm))

  (defun vterm-split () 
    (interactive)
    (split-window-vertically)
    (other-window 1)
    (vterm))

#+end_src

*** Vterm setup
#+begin_src emacs-lisp

  (setup (:package vterm)
    (:bind "C-c s v" vterm-vertical-split)
    (:when-loaded
      (progn
        (setq vterm-max-scrollback 10000)
        (advice-add 'evil-collection-vterm-insert :before #'vterm-reset-cursor-point))))

#+end_src

** Neotree
#+begin_src emacs-lisp

  (setup (:package neotree))

#+end_src

** Fzf
*** Fcd
#+begin_src emacs-lisp

  (defun fcd ()
    (interactive)
    (fzf-find-file "~"))

#+end_src

*** Fzf setup
#+begin_src emacs-lisp

  (setup (:package fzf)
    (setenv "FZF_DEFAULT_COMMAND" "find -type f")
    (main/leader-keys
      "pf" '(fcd :which-key "fzf files in home dir")
      "fg" '(projectile-find-file :which-key "fzf files in current dir")))

#+end_src

** Plot
#+begin_src emacs-lisp

  (setup (:package gnuplot))

#+end_src

** Environment variables
#+begin_src emacs-lisp

  (setup (:package exec-path-from-shell)
    (exec-path-from-shell-copy-env "RUSTUP_HOME")
    (exec-path-from-shell-copy-env "CARGO_HOME"))

#+end_src

** Tab-bar
#+begin_src emacs-lisp

  (setup tab-bar
    (tab-bar-mode 1)
    (:option tab-bar-show 1)
    (main/leader-keys
     "t" '(tab-bar-new-tab :which-key "create new tab")))

#+end_src

** Development
*** Tree-sitter
#+begin_src emacs-lisp

  (setup (:package tree-sitter tree-sitter-langs)
    (:option global-tree-sitter-mode 1)
    (set-face-attribute 'tree-sitter-hl-face:punctuation nil :inherit 'fixed-pitch))

#+end_src

*** Snippets
#+begin_src emacs-lisp

  (setup (:package yasnippet yasnippet-snippets)
    (:option yas-snippet-dirs '("~/.config/emacs/snippets")
             yas-triggers-in-field t)
    (yas-global-mode 1))

#+end_src

*** LSP
**** LSP setup
#+begin_src emacs-lisp

  (setup (:package lsp-mode lsp-ui company)
    (:option lsp-ui-sideline-show-diagnostics t
             lsp-ui-sideline-show-hover t
             ;company-minimum-prefix-length 1
             lsp-ui-sideline-show-code-actions t))

#+end_src

**** LSP language function
Call this function when setting up any language with LSP support.
#+begin_src emacs-lisp

  (defun main/lsp-lang-setup ()
    (company-mode 1)
    (electric-pair-local-mode 1)
    (tree-sitter-hl-mode 1)
    (lsp-deferred))

#+end_src

*** Formatter
#+begin_src emacs-lisp

  (setup (:package format-all))

#+end_src

*** Parinfer
#+begin_src emacs-lisp

  (setup (:package parinfer-rust-mode)
    (:option parinfer-rust-dim-parens nil))

#+end_src

*** Languages 
**** Emacs lisp
#+begin_src emacs-lisp

  (setup elisp
    (:with-mode emacs-lisp-mode
      (:hook (lambda () (flymake-mode 1)
                        (parinfer-rust-mode 1)))))

#+end_src

**** Python
#+begin_src emacs-lisp

  (setup (:package python-mode lsp-pyright)
    (:with-mode python-mode
      (:hook (lambda () (require 'lsp-pyright)
                        (main/lsp-lang-setup)))))

#+end_src

**** C 
#+begin_src emacs-lisp

  (setup c-mode
     (:hook (lambda () (main/lsp-lang-setup))))

#+end_src

**** Rust
#+begin_src emacs-lisp

  (setup (:package rustic)
    (:hook (lambda () (main/lsp-lang-setup))))

#+end_src

**** JavaScript
#+begin_src emacs-lisp

  (setup (:package js2-mode tide)
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (:hook (lambda () (main/lsp-lang-setup)
                      (tide-setup))))

#+end_src

* Org
** Basic org-mode setup
*** Font and modes
#+begin_src emacs-lisp

  (setq ispell-program-name "aspell")
  (setenv "PATH" (shell-command-to-string "echo -n $PATH"))
  (defun main/org-font-setup ()
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.5)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)
                    (org-document-title . 2.0)))
      (set-face-attribute (car face) nil :font profile/variable-font :weight 'regular :height (cdr face)))
    (set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))
    (set-face-attribute 'org-block nil    :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil    :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil    :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil    :inherit 'fixed-pitch))

  (defun main/org-mode-setup ()
    (org-indent-mode 1)
    (flyspell-mode 1)
    (show-paren-mode 1)
    (yas-activate-extra-mode 'latex-mode)
    (variable-pitch-mode 1)
    (visual-fill-column-mode 1)
    (visual-line-mode 1)
    (org-display-inline-images)
    (display-line-numbers-mode -1)
    (org-bullets-mode 1)
    (main/org-font-setup))

#+end_src

*** Calling org setup
#+begin_src emacs-lisp

  (setup (:package org visual-fill-column org-bullets)
    (:option ispell-program-name "aspell"
             image-use-external-converter t
             org-image-actual-width (/ (display-pixel-width) 5)
             org-preview-latex-image-directory "~/.config/emacs/ltximg/ltximg"
             visual-fill-column-width 100
             visual-fill-column-center-text t
             org-startup-indented t
             org-bullets-bullet-list '(" ")
             org-ellipsis "  " ;; folding symbolgnu
             org-pretty-entities t
             org-hide-emphasis-markers t
             org-agenda-block-separator ""
             org-fontify-whole-heading-line t
             org-fontify-done-headline t
             org-fontify-quote-and-verse-blocks t)
    (:with-mode org-mode
      (:hook (lambda () 
               (main/org-mode-setup)))))

#+end_src

*** Org-babel
#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (C . t)
     (latex . t)
     (gnuplot . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)

#+end_src

*** LaTeX
#+begin_src emacs-lisp

  (setup 
    (:option org-format-latex-options
               (plist-put org-format-latex-options :scale profile/latex-scale)))

#+end_src

*** Structure templates
#+begin_src emacs-lisp

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("clang" . "src C"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src C++"))
    (add-to-list 'org-structure-template-alist '("gnuplot" . "src gnuplot"))
    (add-to-list 'org-structure-template-alist '("la" . "src latex"))
    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("python" . "src python")))

#+end_src

** Agenda
#+begin_src emacs-lisp

  (setq org-agenda-files (directory-files-recursively "~/Notes" "\\.org$"))
  (setup (:package org-super-agenda))
  (require 'org-super-agenda)
 (let ((org-super-agenda-groups
       '(;; Each group has an implicit boolean OR operator between its selectors.
         (:name "Today"  ; Optionally specify section name
                :time-grid t  ; Items that appear on the time grid
                :todo "TODAY")  ; Items that have this TODO keyword
         (:name "Important"
                ;; Single arguments given alone
                :tag "bills"
                :priority "A")
         ;; Set order of multiple groups at once
         (:order-multi (2 (:name "Shopping in town"
                                 ;; Boolean AND group matches items that match all subgroups
                                 :and (:tag "shopping" :tag "@town"))
                          (:name "Food-related"
                                 ;; Multiple args given in list with implicit OR
                                 :tag ("food" "dinner"))
                          (:name "Personal"
                                 :habit t
                                 :tag "personal")
                          (:name "Space-related (non-moon-or-planet-related)"
                                 ;; Regexps match case-insensitively on the entire entry
                                 :and (:regexp ("space" "NASA")
                                               ;; Boolean NOT also has implicit OR between selectors
                                               :not (:regexp "moon" :tag "planet")))))
         ;; Groups supply their own section names when none are given
         (:todo "WAITING" :order 8)  ; Set order of this section
         (:todo ("SOMEDAY" "TO-READ" "CHECK" "TO-WATCH" "WATCHING")
                ;; Show this group at the end of the agenda (since it has the
                ;; highest number). If you specified this group last, items
                ;; with these todo keywords that e.g. have priority A would be
                ;; displayed in that group instead, because items are grouped
                ;; out in the order the groups are listed.
                :order 9)
         (:priority<= "B"
                      ;; Show this section after "Today" and "Important", because
                      ;; their order is unspecified, defaulting to 0. Sections
                      ;; are displayed lowest-number-first.
                      :order 1)
         ;; After the last group, the agenda will display items that didn't
         ;; match any of these groups, with the default order position of 99
         )))
  (org-agenda nil "a")) (org-super-agenda-mode 1)

#+end_src

** Org-roam
#+begin_src emacs-lisp

    (use-package org-roam
      :ensure t
      :custom
      (org-roam-directory (file-truename "~/Notes/roam/"))
      :bind (("C-c n l" . org-roam-buffer-toggle)
             ("C-c n f" . org-roam-node-find)
             ("C-c n g" . org-roam-graph)
             ("C-c n i" . org-roam-node-insert)
             ("C-c n c" . org-roam-capture)
             ;; Dailies
             ("C-c n j" . org-roam-dailies-capture-today))
      :config
      ;; If you're using a vertical completion framework, you might want a more informative completion interface
      (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
      (org-roam-db-autosync-mode)
      ;; If using org-roam-protocol
      (require 'org-roam-protocol))

    (setup (:package org-roam-ui)
      :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

    (setup (:package consult-org-roam))
  (consult org-roam-mode 1)

#+end_src

** Org-present
*** Startup hook
#+begin_src emacs-lisp

  (defun main/org-present-hook ()
    (setq-local face-remapping-alist '(
                                       (default (:height 1.5) variable-pitch)
                                       (header-line (:height 4.5) variable-pitch)
                                       (org-document-title (:height 1.75) org-document-title)
                                       (org-document-info (:height 1.5) org-document-info)))
        ;(org-code (:height 1.55) org-code)
        ;(org-verbatim (:height 1.55) org-verbatim)
        ;(org-block (:height 1.25) org-block)
    (setq header-line-format " "))

#+end_src

*** Quit hook
#+begin_src emacs-lisp

  (defun main/org-present-quit-hook ()
    (setq header-line-format nil)
    (org-overview)
    (setq-local face-remapping-alist '((default variable-pitch default))))

#+end_src

*** Slide preparation
#+begin_src emacs-lisp

  (defun main/org-present-prepare-slide ()
    (org-overview)
    (org-show-entry)
    (org-show-children))

  (defun main/org-present-next ()
    (interactive)
    (org-present-next)
    (main/org-present-prepare-slide))

  (defun main/org-present-prev ()
    (interactive)
    (org-present-prev)
    (main/org-present-prepare-slide))

#+end_src

*** Setup
#+begin_src emacs-lisp

  (setup (:package org-present)
    (add-hook 'org-present-mode-hook 'main/org-present-hook)
    (add-hook 'org-present-mode-quit-hook 'main/org-present-quit-hook))

  (evil-define-key '(normal visual) 'global (kbd "C-c C-j") 'main/org-present-next)
  (evil-define-key '(normal visual) 'global (kbd "C-c C-k") 'main/org-present-prev)

#+end_src


